syntax = "proto3";
package main;

enum RequestType {
  // Dummy 0 value to make it proto3 complaint
  UNKNOWN = 0;

  GET_STREAMING = 3;
  PUT_STREAMING = 2;
  GET_SETTINGS = 4;
  PUT_SETTINGS = 5;
  GET_CONTROL = 6;
  PUT_CONTROL = 7;
  GET_STATUS = 8;
  PUT_STATUS = 9;
  GET_SENSOR_DATA = 12;
  PUT_SENSOR_DATA = 11;
  GET_UCTOKENS = 13;
  PUT_UCTOKENS = 14;
  PUT_SETUP_NETWORK = 15;
  PUT_SETUP_SERVER = 16;
  GET_FIRMWARE = 17;
  PUT_FIRMWARE = 18;
  GET_PLAYBACK = 19;
  PUT_PLAYBACK = 20;
  GET_SOUNDTRACKS = 21;
  GET_STATUS_NETWORK = 22;
  GET_LIST_NETWORKS = 23;
  GET_LOGS = 24;
  GET_BANDWIDTH = 25;
  GET_AUDIO_STREAMING = 26;
  PUT_AUDIO_STREAMING = 27;
  GET_WIFI_SETUP = 28;
  PUT_WIFI_SETUP = 29;
  PUT_STING_START = 30;
  PUT_STING_STOP = 31;
  PUT_STING_STATUS = 32;
  PUT_STING_ALERT = 34;
  PUT_KEEP_ALIVE = 35;
  GET_STING_STATUS = 36;
  PUT_STING_TEST = 37;
  PUT_RTSP_STREAMING = 38;
  GET_UOM_URI = 39;
  GET_UOM = 40;
  PUT_UOM = 41;
  GET_AUTH_KEY = 42;
  PUT_AUTH_KEY = 43;
  PUT_HEALTH = 44;
  PUT_TCP_REQUEST = 45;
  GET_STING_START = 46;
  GET_LOGS_URI = 47;
}

enum SensorType {
  SOUND = 0;
  MOTION = 1;
  TEMPERATURE = 2;
  HUMIDITY = 3;
  LIGHT = 4;
  NIGHT = 5;
}

message SensorData {
  SensorType sensorType = 1;
  bool isAlert = 4;
  int32 timestamp = 5;
  int32 valueMilli = 6;
  int32 value = 3;
}

message GetSensorData {
  bool all = 1;
  bool temperature = 4;
  bool humidity = 5;
  bool light = 6;
  bool night = 7;
}

message Control {
  bool forceConnectToServer = 5;
  int32 nightLightTimeout = 6;

  enum NightLight {
    LIGHT_OFF = 0;
    LIGHT_ON = 1;
  }

  NightLight nightLight = 3;

  message SensorDataTransfer {
    bool sound = 1;
    bool motion = 2;
    bool temperature = 3;
    bool humidity = 4;
    bool light = 5;
    bool night = 6;
  }

  SensorDataTransfer sensorDataTransfer = 4;

  // ...
}

enum StreamIdentifier {
  DVR = 0;
  ANALYTICS = 1;
  MOBILE = 2;
}

enum MountingMode {
  STAND = 0;
  TRAVEL = 1;
  SWITCH = 2;
}

message Settings {
  bool nightVision = 2;

  message SensorSettings {
    SensorType sensorType = 1;
    bool useLowThreshold = 2;
    bool useHighThreshold = 3;
    int32 lowThreshold = 4;
    int32 highThreshold = 5;
    int32 sampleIntervalSec = 6;
    int32 triggerIntervalSec = 7;
    bool useMilliForThresholds = 8;
  }

  repeated SensorSettings sensors = 7;

  message StreamSettings {
    StreamIdentifier id = 1;
    int32 bitrate = 2;
    
    int32 economyBitrate = 3;
    int32 economyFps = 4;
    int32 bestBitrate = 5;
    int32 bestFps = 6;
    
    // abr = 7;
  }

  repeated StreamSettings streams = 8;
  int32 volume = 9;

  enum AntiFlicker {
    FR50HZ = 0;
    FR60HZ = 1;
  }

  AntiFlicker antiFlicker = 10;

  bool sleepMode = 11;
  bool statusLightOn = 12;
  int32 mountingMode = 15;

  enum WifiBand {
    ANY = 0;
    FR2_4GHZ = 1;
    FR5_0GHZ = 2;
  }

  WifiBand wifiBand = 18;

  bool micMuteOn = 20;
}

message Status {
  bool upgradeDownloaded = 1;

  enum ConnectionToServer {
    DISCONNECTED = 0;
    CONNECTED = 1;
  }

  ConnectionToServer connectionToServer = 2;
  string currentVersion = 3;
  MountingMode mode = 4;
  bool isSecurityUpgrade = 5;
  string downloadedVersion = 6;
  string hardwareVersion = 7;
}

message Playback {
  enum Status {
    STARTED = 0;
    STOPPED = 1;
  }

  Status status = 1;
}

message Stream {
  enum Type {
    LOCAL = 0;
    REMOTE = 1;
    RTSP = 2;
    P2P = 3;
  }

  Type type = 1;
  string url = 2;
  int32 bps = 3;
}

message Streaming {
  StreamIdentifier id = 1;

  enum Status {
    STARTED = 0;
    STOPPED = 1;
    PAUSED = 2;
  }

  Status status = 2;
  string rtmpUrl = 3;
  int32 attempts = 4;
}

message GetLogs {
  string url = 1;
}

message Request {
  int32 id = 1;
  RequestType type = 2;

  GetSensorData getSensorData = 12;
  repeated SensorData sensorData = 13;

  Streaming streaming = 4;
  Control control = 15;
  Settings settings = 5;
  Status status = 7;
  Playback playback = 16;
  GetLogs getLogs = 18;
}

message Response {
  int32 requestId = 1;
  RequestType requestType = 2;
  int32 statusCode = 3;

  repeated SensorData sensorData = 9;
  Settings settings = 6;
}

message Message {
  enum Type {
    KEEPALIVE = 0;
    REQUEST = 1;
    RESPONSE = 2;
  }
  Type type = 1;
  Request request = 2;
  Response response = 3;
}
